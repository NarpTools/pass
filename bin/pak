#!/bin/bash

if [[ "$1" == "init" ]]; then
    mkdir pak project bin media
    touch pak.conf project/paths.txt project/install.sh project/remove.sh project/update.sh project/depends.txt pak/ensure.txt
    echo -e "DEPENDS=(\n)" > project/depends.txt
    git rev-parse --is-inside-work-tree &>/dev/null || git init
fi

if [[ "$1" == "zip" ]]; then
    # Check if we're in a valid pak project
    if [[ ! -f "pak.conf" ]]; then
        echo "‚ùåÔ∏è Not a valid pak project: pak.conf not found."
        exit 1
    fi

    # Extract package name and version
    PACKAGE_NAME=$(grep PACKAGE_NAME pak.conf | cut -d= -f2 | tr -d '"')
    PACKAGE_VERSION=$(grep PACKAGE_VERSION pak.conf | cut -d= -f2 | tr -d '"')
    OUTPUT_NAME="${PACKAGE_NAME,,}-${PACKAGE_VERSION}.choco.pkg"

    # Create temporary build directory
    mkdir -p .build
    cp -r bin media pak.conf pak project .build/ 2>/dev/null

    # Create the directory
    if [[ ! -d "archives" ]]; then
        mkdir archives
    fi

    # Create the archive
    tar -cJf "$OUTPUT_NAME" -C .build .
    mv "$OUTPUT_NAME" archives

    # Cleanup
    rm -rf .build

    echo "üì¶ Package archived: $OUTPUT_NAME"
fi

if [[ "$1" == "module-add" ]]; then
    MODULE="$2"
    ORIGIN="./$MODULE"
    TARGET="./pak/modules/$MODULE"
    # Check if we're in a valid pak project
    if [[ ! -f "pak.conf" ]]; then
        echo "‚ùåÔ∏è Not a valid pak project: pak.conf not found."
        exit 1
    fi
    # Ensure modules directory exists
    if [[ ! -d pak/modules ]]; then
        mkdir pak/modules
    fi
    if [[ -d "$TARGET" ]]; then
        echo "‚ö†Ô∏è Module $MODULE is already installed at $TARGET. Skipping..."
        exit 0
    fi
    # Move the module
    mv "$ORIGIN" "$TARGET"
    echo "‚úÖ Module $MODULE has been added."
fi

if [[ "$1" == "module-del" ]]; then
    MODULE="$2"
    TARGET="./pak/modules/$MODULE"
    # Check if we're in a valid pak project
    if [[ ! -f "pak.conf" ]]; then
        echo "‚ùåÔ∏è Not a valid pak project: pak.conf not found."
        exit 1
    fi
    # Ensure modules directory exists
    if [[ ! -d pak/modules ]]; then
        echo "‚ùåÔ∏è No modules installed."
        exit 1
    fi
    if [[ ! -d "$TARGET" ]]; then
        echo "‚ùåÔ∏è $MODULE is not installed."
        exit 1
    fi
    # Delete the module
    rm -rf "$TARGET"
    echo "üóëÔ∏è Module $MODULE has been deleted."
fi

if [[ "$1" == "module-list" ]]; then
    if [[ ! -d "pak/modules" ]]; then
        echo "‚ÑπÔ∏è No modules installed."
        exit 0
    fi
    echo "üì¶ Installed modules:"
    ls pak/modules
    exit 0
fi
